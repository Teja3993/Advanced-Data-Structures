# -*- coding: utf-8 -*-
"""Copy of ADS_Lab4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rHurhNQte2MZq0ZYso87kn50Dmzuoegs
"""

class MyDictionary:
    """
    Custom Dictionary Implementation in Python using Lists.
    Supports two collision resolution strategies:
      - Linear Probing
      - Quadratic Probing

    Methods:
        __init__(size, method): Initializes hash table with given size and probing method.
        hash_function(key): Returns index for a given key.
        insert(key, value): Inserts/updates key-value pair.
        search(key): Returns value for given key or None if not found.
        delete(key): Removes key from table.
        display(): Prints current state of the hash table.
    """

    def __init__(self, size=10, method="linear"):
        """
        Initialize the dictionary.

        Args:
            size (int): Size of the hash table (default 10).
            method (str): Collision resolution strategy ("linear" or "quadratic").
        """
        self.size = size
        self.table = [None] * size  # List to store key-value pairs
        if method not in ("linear", "quadratic"):
            raise ValueError("Method must be 'linear' or 'quadratic'")
        self.method = method

    def hash_function(self, key):
        """
        Hash function to map key -> index.

        Args:
            key: The key to hash.

        Returns:
            int: Index within the table.
        """
        return hash(key) % self.size

    def insert(self, key, value):
        """
        Insert a key-value pair into the hash table.
        If key already exists, update its value.

        Args:
            key: Key to insert.
            value: Value to associate with key.

        Raises:
            Exception: If table is full.
        """
        idx = self.hash_function(key)
        i = 0

        while i < self.size:
            # Choose probing method
            if self.method == "linear":
                new_idx = (idx + i) % self.size
            else:  # quadratic probing
                new_idx = (idx + i*i) % self.size

            # Insert or update if slot is empty or matches key
            if self.table[new_idx] is None or self.table[new_idx][0] == key:
                self.table[new_idx] = (key, value)
                return

            # Otherwise probe further
            i += 1

        # Table is full
        raise Exception("HashTable Full - Cannot insert")

    def search(self, key):
        """
        Search for a key in the hash table.

        Args:
            key: Key to search.

        Returns:
            Value if key exists, None otherwise.
        """
        idx = self.hash_function(key)
        i = 0

        while i < self.size:
            # Choose probing method
            if self.method == "linear":
                new_idx = (idx + i) % self.size
            else:
                new_idx = (idx + i*i) % self.size

            # Empty slot means key not found
            if self.table[new_idx] is None:
                return None

            # Key found
            if self.table[new_idx][0] == key:
                return self.table[new_idx][1]

            # Keep probing
            i += 1

        return None

    def delete(self, key):
        """
        Delete a key-value pair from the hash table.

        Args:
            key: Key to delete.

        Returns:
            bool: True if deleted, False if not found.
        """
        idx = self.hash_function(key)
        i = 0

        while i < self.size:
            if self.method == "linear":
                new_idx = (idx + i) % self.size
            else:
                new_idx = (idx + i*i) % self.size

            # Stop if slot empty (key not present)
            if self.table[new_idx] is None:
                return False

            # Key found -> mark as deleted
            if self.table[new_idx][0] == key:
                self.table[new_idx] = ("<deleted>", None)
                return True

            i += 1

        return False

    def display(self):
        """
        Display current state of the hash table.
        Shows index and stored (key, value).
        """
        for i, entry in enumerate(self.table):
            print(i, ":", entry)


# ---------------- Example Usage ----------------

print("--- Linear Probing ---")
d1 = MyDictionary(size=7, method="linear")
d1.insert("apple", 100)
d1.insert("banana", 200)
d1.insert("grape", 300)
d1.display()
print("Search banana:", d1.search("banana"))
d1.delete("banana")
d1.display()

print("\n--- Quadratic Probing ---")
d2 = MyDictionary(size=7, method="quadratic")
d2.insert("apple", 100)
d2.insert("banana", 200)
d2.insert("grape", 300)
d2.display()
print("Search grape:", d2.search("grape"))